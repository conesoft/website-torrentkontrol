@page "/"
@using Conesoft.Website.TorrentKontrol.Components.Controls
@using Conesoft.Blazor.Components.Interfaces
@using Conesoft.Blazor.Components
@using MonoTorrent
@using System.Reflection
@using System.Text.RegularExpressions
@using Toolbelt.Blazor.ViewTransition

@rendermode InteractiveServer

@inject Services.Torrents Torrents
@inject IJSRuntime js
@inject ICleanNameGenerator cleanName
@inject IViewTransition viewTransition


<CascadingAuthenticationState>
    <UserHeaderNav>
        <HomeButtonContent>⌂</HomeButtonContent>
        <NavContent>
            <NavLink Match=NavLinkMatch.All href="/">torrentkontrol</NavLink>
            <AuthorizeView>
                <Authorized>
                    <UnblockedLink />
                </Authorized>
            </AuthorizeView>
        </NavContent>
    </UserHeaderNav>
    <main>
        <AuthorizeView>
            <Authorized>
                <section style="view-transition-name: section-addmagnet">
                    <button @onclick="AddMagnet">add magnet</button>
                </section>
                @if (torrents.Any() == false)
                {
                    <section style="view-transition-name: section-notorrents">
                        <aside class="torrent empty">no active torrent yet ... :(</aside>
                    </section>
                }
                else
                {
                    var incoming = torrents.Where(t => t.State == MonoTorrent.Client.TorrentState.Metadata);
                    var downloading = torrents.Where(t => t.State == MonoTorrent.Client.TorrentState.Downloading);

                    if (incoming.Any())
                    {
                        <section style="view-transition-name: section-incomingtorrents">
                            <header>Incoming</header>
                            <ul class="incoming">
                                @foreach (var t in incoming)
                                {
                                    <IncomingTorrent @key=t Torrent=@t />
                                }
                            </ul>
                        </section>
                    }

                    if (downloading.Any())
                    {
                        <section style="view-transition-name: section-downloadingtorrents">
                            <header>Downloading</header>
                            <ul class="downloading">
                                @foreach (var t in downloading)
                                {
                                    <ActiveTorrent @key=t Torrent=@t />
                                }
                            </ul>
                        </section>
                    }
                }
            </Authorized>
        </AuthorizeView>

        <DirectoryListing Path="Downloads/Torrents" />
    </main>
</CascadingAuthenticationState>

@code {
    IList<MonoTorrent.Client.TorrentManager> torrents = [];

    protected override Task OnInitializedAsync()
    {
        Torrents.Update += () => InvokeAsync(async () =>
        {
            // if (RendererInfo.IsInteractive)
            // {
            //     await viewTransition.BeginAsync();
            // }
            torrents = Torrents.GetAllTorrents();
            StateHasChanged();
            // if (RendererInfo.IsInteractive)
            // {
            //     await viewTransition.EndAsync();
            // }
        }).Wait();
        return Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine("checking for filehandling");
            var module = await js.InvokeAsync<IJSObjectReference>("import", "/Components/Pages/Index.razor.js?" + Random.Shared.NextInt64());
            var supported = await module.InvokeAsync<bool>("setupFileProcessing", Assembly.GetExecutingAssembly().GetName().Name);
            if (supported)
            {
                Console.WriteLine("file handling supported");
            }
        }
    }

    [JSInvokable]
    public static async Task ProcessFile(string filename, byte[] bytes)
    {
        var _ = Services.Torrents.Add(bytes);
        await Task.CompletedTask;
    }

    async Task AddMagnet()
    {
        var magnet = await js.InvokeAsync<string>("prompt", "add magnet uri");
        if (magnet != null)
        {
            await Torrents.Add(MagnetLink.Parse(magnet));
        }
    }
}