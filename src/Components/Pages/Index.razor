@page "/"
@using Conesoft.Website.TorrentKontrol.Components.Controls
@using MonoTorrent

@rendermode InteractiveServer

@inject Services.Torrents Torrents
@inject IJSRuntime js

<CascadingAuthenticationState>
    <UserHeaderNav>
        <NavLink Match=NavLinkMatch.All href="/">⌂ torrentkontrol</NavLink>
        <AuthorizeView>
            <Authorized>
                <UnblockedLink />
            </Authorized>
        </AuthorizeView>
    </UserHeaderNav>
    <main>
        <AuthorizeView>
            <Authorized>
                <section>
                    <button @onclick="AddMagnet">add magnet</button>
                </section>
                <section>
                    <ul id="torrents">
                        @if (torrents.Any() == false)
                        {
                            <li>
                                <aside style="color: var(--color-50)">no active torrent yet ... :(</aside>
                            </li>
                        }
                        @foreach (var t in torrents)
                        {
                            @if (t.Torrent?.Size > 0)
                            {
                                <li horizontal style="grid-template-columns: 1fr auto">
                                    <section vertical>
                                        <b>@t.Torrent?.Name</b>
                                        <aside>size: @t.Torrent?.Size.Bytes(), @Math.Round(t.Progress, 2)%, speed: @t.Monitor?.DownloadSpeed.Bytes()/s @Enum.GetName(t.State)?.ToLowerInvariant()</aside>
                                        <progress max='100' value=@t.Progress></progress>
                                    </section>
                                    <button @onclick="@(() => Torrents.Remove(t))">✕</button>
                                </li>
                            }
                            else
                            {
                                <li>
                                    <aside style="color: var(--accent-color)">incoming transmission @(string.IsNullOrEmpty(t.MagnetLink.Name) == false ? $"for {t.MagnetLink.Name}" : "") ...</aside>
                                </li>
                            }
                        }
                    </ul>
                </section>
                <section>
                </section>
            </Authorized>
        </AuthorizeView>

        <Conesoft.Blazor.Components.Controls.DirectoryListing Path="Downloads/Torrents" />
    </main>
</CascadingAuthenticationState>

@code {
    IList<MonoTorrent.Client.TorrentManager> torrents = [];

    protected override Task OnInitializedAsync()
    {
        Torrents.Update += () =>
        {
            torrents = Torrents.GetAllTorrents();
            InvokeAsync(() => StateHasChanged());
        };
        return Task.CompletedTask;
    }

    async Task AddMagnet()
    {
        var magnet = await js.InvokeAsync<string>("prompt", "add magnet uri");
        if(magnet != null)
        {
            await Torrents.Add(MagnetLink.Parse(magnet));
        }
    }
}