@page "/"
@using Conesoft.Website.TorrentKontrol.Components.Controls
@using Conesoft.Blazor.Components.Interfaces
@using Conesoft.Blazor.Components
@using MonoTorrent
@using System.Reflection
@using System.Text.RegularExpressions
@using Toolbelt.Blazor.ViewTransition

@rendermode InteractiveServer

@inject Services.Torrents Torrents
@inject IJSRuntime js
@inject ICleanNameGenerator cleanName
@inject IViewTransition viewTransition

@implements IDisposable

<CascadingAuthenticationState>
    <UserHeaderNav>
        <HomeButtonContent>⌂</HomeButtonContent>
        <NavContent>
            <NavLink Match=NavLinkMatch.All href="/">torrentkontrol</NavLink>
            <AuthorizeView>
                <Authorized>
                    <UnblockedLink />
                </Authorized>
            </AuthorizeView>
        </NavContent>
    </UserHeaderNav>
    <main>
        <AuthorizeView>
            <Authorized>
                <AuthorizeView Roles="Admin, Editor" Context="_">
                    <Authorized>
                        <section style="view-transition-name: section-addmagnet">
                            <button @onclick="AddMagnet">add magnet</button>
                        </section>
                    </Authorized>
                </AuthorizeView>

                @if (incoming.Any() == false && downloading.Any() == false)
                {
                    <section style="view-transition-name: section-notorrents">
                        <aside class="torrent empty">no active torrent yet ... :(</aside>
                    </section>
                }
                else
                {
                    if (incoming.Any())
                    {
                        <section title="Incoming" style="view-transition-name: section-incomingtorrents">
                            <ul class="without-header incoming">
                                @foreach (var t in incoming)
                                {
                                    <IncomingTorrent style=@($"view-transition-name: {t.Name.Kebaberize()}") @key=t Torrent=@t />
                                }
                            </ul>
                        </section>
                    }

                    if (downloading.Any())
                    {
                        <section title="Downloading" style="view-transition-name: section-downloadingtorrents">
                            <ul class="without-icon downloading">
                                @foreach (var t in downloading)
                                {
                                    <ActiveTorrent style=@($"view-transition-name: {t.Name.Kebaberize()}") @key=t Torrent=@t />
                                }
                            </ul>
                        </section>
                    }
                }
            </Authorized>
        </AuthorizeView>

        <DirectoryListing Path="Downloads/Torrents" />
    </main>
</CascadingAuthenticationState>

@code {
    MonoTorrent.Client.TorrentManager[] incoming = [];
    MonoTorrent.Client.TorrentManager[] downloading = [];

    protected override Task OnInitializedAsync()
    {
        Torrents.Update += OnTorrentUpdate;
        return Task.CompletedTask;
    }

    public async Task OnTorrentUpdate()
    {
        await InvokeAsync(async () =>
        {
            var torrents = Torrents.GetAllTorrents();

            var newincoming = torrents.Where(t => t.State == MonoTorrent.Client.TorrentState.Metadata).ToArray();
            var newdownloading = torrents.Where(t => t.State == MonoTorrent.Client.TorrentState.Downloading).ToArray();

            // needs expansion for other content
            var needsTransition =
                newincoming.Length != incoming.Length
                || newdownloading.Length != downloading.Length
                ;

            incoming = newincoming;
            downloading = newdownloading;

            if (needsTransition)
            {
                await viewTransition.BeginAsync();
            }

            StateHasChanged();

            if (needsTransition)
            {
                await viewTransition.EndAsync();
            }
        });
    }


    void IDisposable.Dispose()
    {
        Torrents.Update -= OnTorrentUpdate;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine("checking for filehandling");
            var module = await js.InvokeAsync<IJSObjectReference>("import", "/Components/Pages/Index.razor.js?" + Random.Shared.NextInt64());
            var supported = await module.InvokeAsync<bool>("setupFileProcessing", Assembly.GetExecutingAssembly().GetName().Name);
            if (supported)
            {
                Console.WriteLine("file handling supported");
            }

            //Console.WriteLine("View Transitions are supported: " + await viewTransitionService.IsSupportedAsync());
        }
    }

    [JSInvokable]
    public static async Task ProcessFile(string filename, byte[] bytes)
    {
        var _ = Services.Torrents.Add(bytes);
        await Task.CompletedTask;
    }

    async Task AddMagnet()
    {
        var magnet = await js.InvokeAsync<string>("prompt", "add magnet uri");
        if (magnet != null)
        {
            await Torrents.Add(MagnetLink.Parse(magnet));
        }
    }
}