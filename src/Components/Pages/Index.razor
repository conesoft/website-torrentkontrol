@page "/"
@using Conesoft.Website.TorrentKontrol.Components.Controls
@using Conesoft.Blazor.Components.Interfaces
@using MonoTorrent
@using System.Reflection
@using System.Text.RegularExpressions

@rendermode InteractiveServer

@inject Services.Torrents Torrents
@inject IJSRuntime js
@inject ICleanNameGenerator cleanName

<CascadingAuthenticationState>
    <UserHeaderNav>
        <HomeButtonContent>⌂</HomeButtonContent>
        <NavContent>
            <NavLink Match=NavLinkMatch.All href="/">torrentkontrol</NavLink>
            <AuthorizeView>
                <Authorized>
                    <UnblockedLink />
                </Authorized>
            </AuthorizeView>
        </NavContent>
    </UserHeaderNav>
    <main>
        <AuthorizeView>
            <Authorized>
                <section>
                    <button @onclick="AddMagnet">add magnet</button>
                </section>
                <section>
                    @if (torrents.Any() == false)
                    {
                        <aside class="torrent empty">no active torrent yet ... :(</aside>
                    }
                    else
                    {
                        <ul id="torrents">
                            @foreach (var t in torrents)
                            {
                                @if (t.Torrent?.Size > 0)
                                {
                                    <li class="torrent downloading">
                                        <progress max='100' value=@t.Progress></progress>
                                        <section>
                                            <b>@cleanName.GenerateCleanNameFromString(t.Torrent.Name)</b>
                                            <aside>size: @t.Torrent?.Size.Bytes(), @Math.Round(t.Progress, 2)%, speed: @t.Monitor?.DownloadSpeed.Bytes()/s @Enum.GetName(t.State)?.ToLowerInvariant()</aside>
                                            <TagList SourceForTags="@t.Torrent?.Name" />
                                        </section>
                                        <button dangerous @onclick="@(() => Torrents.Remove(t))">✕</button>
                                    </li>
                                }
                                else
                                {
                                    var cleanedName = cleanName.GenerateCleanNameFromString(t.MagnetLink.Name);
                                    <li class="torrent incoming">
                                        <section>
                                            <aside>incoming transmission @(string.IsNullOrEmpty(cleanedName) == false ? $"for '{cleanedName}'" : "") &hellip;</aside>
                                            <TagList SourceForTags="@t.MagnetLink.Name" />
                                        </section>           
                                    </li>
                                }
                            }
                        </ul>
                    }
                </section>
                @* <section>
                <ul>
                <li class="torrent downloading">
                <progress max='100' value=50></progress>
                <section>
                <b>Fancy Torrent Name Here</b>
                <aside>size: 10GB, 50%, speed: 10MB/s downloading</aside>
                <TagList SourceForTags="Fancy Torrent Name Here 1080p S01E01" />
                </section>
                <button dangerous>✕</button>
                </li>
                <li class="torrent downloading">
                <progress max='100' value=5></progress>
                <section>
                <b>Fancy Torrent Name Here</b>
                <aside>size: 10GB, 5%, speed: 10MB/s downloading</aside>
                <TagList SourceForTags="Fancy Torrent Name Here  1080p S01E01" />
                </section>
                <button dangerous>✕</button>
                </li>
                <li class="torrent downloading">
                <progress max='100' value=95></progress>
                <section>
                <b>Fancy Torrent Name Here</b>
                <aside>size: 10GB, 95%, speed: 10MB/s downloading</aside>
                <TagList SourceForTags="Fancy Torrent Name Here" />
                </section>
                <button dangerous>✕</button>
                </li>
                <li class="torrent incoming">
                <aside>incoming transmission for 'Fancy Magnet Name Here' &hellip;</aside>
                <TagList SourceForTags="Fancy Torrent Name Here" />
                </li>
                </ul>
                </section> *@
            </Authorized>
        </AuthorizeView>

        <DirectoryListing Path="Downloads/Torrents" />
    </main>
</CascadingAuthenticationState>

@code {
    IList<MonoTorrent.Client.TorrentManager> torrents = [];

    protected override Task OnInitializedAsync()
    {
        Torrents.Update += () =>
        {
            torrents = Torrents.GetAllTorrents();
            InvokeAsync(() => StateHasChanged());
        };

        return Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine("checking for filehandling");
            var module = await js.InvokeAsync<IJSObjectReference>("import", "/Components/Pages/Index.razor.js?" + Random.Shared.NextInt64());
            var supported = await module.InvokeAsync<bool>("setupFileProcessing", Assembly.GetExecutingAssembly().GetName().Name);
            if (supported)
            {
                Console.WriteLine("file handling supported");
            }
        }
    }

    [JSInvokable]
    public static async Task ProcessFile(string filename, byte[] bytes)
    {
        var _ = Services.Torrents.Add(filename, bytes);
        await Task.CompletedTask;
    }

    async Task AddMagnet()
    {
        var magnet = await js.InvokeAsync<string>("prompt", "add magnet uri");
        if (magnet != null)
        {
            await Torrents.Add(MagnetLink.Parse(magnet));
        }
    }
}