@page "/addmagneturi"
@using Conesoft.Tools
@using Conesoft.Website.TorrentKontrol.Components.Controls
@using Conesoft.Website.TorrentKontrol.Features.Runtime
@using Conesoft.Website.TorrentKontrol.Features.Runtime.Interfaces
@using Conesoft.Website.TorrentKontrol.Features.Runtime.Services
@using Microsoft.JSInterop
@using MonoTorrent

@inject ITorrentEngineAccess engineAccess
@inject IJSRuntime js
@inject NavigationManager navigation

@rendermode InteractiveServer

<CascadingAuthenticationState>
    <UserHeaderNav>
        <HomeButtonContent>⌂</HomeButtonContent>
        <NavContent>
            <NavLink Match=NavLinkMatch.All href="/">torrentkontrol</NavLink>
            <AuthorizeView>
                <Authorized>
                    <UnblockedLink />
                </Authorized>
            </AuthorizeView>
        </NavContent>
    </UserHeaderNav>
    <main>
        <UserLogin />
        <section>
            <h1>adding torrent</h1>
            <ul>
                <li>@(string.IsNullOrEmpty(magnet?.Name ?? "") == false ? magnet?.Name : magnet?.ToV1Uri())</li>
            </ul>
        </section>
        <section></section>
    </main>
</CascadingAuthenticationState>


@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string? Uri { get; set; }

    MagnetLink? magnet;

    protected override async Task OnParametersSetAsync()
    {
        if (Uri != null && engineAccess.Engine is TorrentEngine engine)
        {
            var uri = System.Uri.UnescapeDataString(Uri);
            magnet = MagnetLink.Parse(uri);
            await Safe.TryAsync(async () => await engine.Add(magnet));
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await Task.Delay(333);
        navigation.NavigateTo("/", forceLoad: true);
    }
}