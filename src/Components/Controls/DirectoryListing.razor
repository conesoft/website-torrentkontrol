@using System.Reflection
@using Conesoft.Files
@using Conesoft.Website.TorrentKontrol.Helpers

@implements IDisposable

@inject FileHostingPaths fileHostingPaths

@rendermode InteractiveServer

@code {
    [Parameter] public string Path { get; set; } = "";
    IEnumerable<Conesoft.Files.Directory> Roots => fileHostingPaths.Roots.Select(p => p / Path);
}

<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            @if (Roots.Where(r => r.Exists).SelectMany(d => d.Directories).Where(d => d.Info.Attributes.HasFlag(FileAttributes.Hidden) == false).Any())
            {
                <section title="Directories" style="view-transition-name: section-directories">
                    <ul class="with-icon">
                        @foreach (var directory in Roots
                       .Where(r => r.Exists)
                       .SelectMany(d => d.Directories)
                       .Where(d => d.Info.Attributes.HasFlag(FileAttributes.Hidden) == false)
                       .OrderBy(d => d.Name, new Conesoft.Tools.NaturalSortComparer())
                       .DistinctBy(d => d.Name)
                    )
                        {
                            <Directory Path="@Path" Current="@directory" />
                        }
                    </ul>
                </section>
            }
            @if (Roots.Where(r => r.Exists).SelectMany(d => d.Files).Any())
            {
                @foreach (var group in GroupedFiles(Roots.Where(r => r.Exists).SelectMany(d => d.Files).Where(f => f.Info.Attributes.HasFlag(FileAttributes.Hidden) == false)))
                {
                    var name = group.Key.Name.Replace("TypeRenderer", "").Replace("Default", "Files");
                    <section title="@name" style=@($"view-transition-name: section-{name}-files")>
                        <ul class="with-icon">
                            @foreach (var file in group.OrderBy(d => d.Name, new Conesoft.Tools.NaturalSortComparer()))
                            {
                                <File Path="@Path" Current="@file" />
                            }
                        </ul>
                    </section>
                }
            }
        </Authorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    IEnumerable<IGrouping<Type, Conesoft.Files.File>> GroupedFiles(IEnumerable<Conesoft.Files.File> files)
    {
        var types = Assembly.GetExecutingAssembly().GetTypes().Where(t => t.Name.EndsWith("TypeRenderer"));

        return files.GroupBy(f =>
        {
            var type = types.FirstOrDefault(
                t => (Activator.CreateInstance(t) as TypeRenderers.DefaultTypeRenderer)!.Extensions.Contains(f.Extension.ToLower()),
                typeof(TypeRenderers.DefaultTypeRenderer)
            );

            return type;
        });
    }

    CancellationTokenSource? cancellationTokenSource = null;
    public void Dispose() => cancellationTokenSource?.Cancel();

    protected override void OnInitialized()
    {
        var roots = fileHostingPaths.Roots.Select(p => p / Path);
        cancellationTokenSource = roots.Where(r => r.Exists).Live(async () => await InvokeAsync(StateHasChanged));
    }
}