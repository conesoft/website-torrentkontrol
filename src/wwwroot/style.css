@layer reset, root, layout, theme, components;
@layer components.a {
    a:focus-visible {
        transition-duration: 0s;
        background-color: var(--accent-color-50);
    }

    li:has(a) {
        position: relative;

        & a:after {
            content: "";
            position: absolute;
            inset: 0;
            z-index: 1;
        }

        & a:focus-visible {
            background-color: initial;
        }

        &:has(:focus-visible) {
            transition-duration: 0s;
            background-color: var(--accent-color-75);
            box-shadow: 0 0 1rem var(--accent-color-75);
        }
    }
}
@layer components.aside {
    aside {

    }
}
@layer components.breadcrumbs {
}
@layer components.buttoninput {

    button, input {
        --button-color: var(--accent-color);

        background-color: var(--background-color-80);
        color: var(--button-color);

        &:hover:not(:disabled) {
            background: var(--button-color);
            color: var(--color);
        }

        &:focus-visible {
            transition-duration: 0s;
            color: var(--color);
            background-color: var(--accent-color-75);
        }
    }
}

@layer components.empty {
    
    *:not(:has(*)) {
        display: initial;
    }
}
@layer components.footer {

    body>footer {
        display: grid;
    }

    @media(min-width: 120ch) {
        body>footer {
            display: flex;
            gap: 0 2ch;

            & * {
                text-wrap: nowrap;
            }

            &>*:last-of-type {
                flex: 1;
                text-align: right;
            }
        }
    }
}
@layer components.header {

    body>header {
        font-size: 2rem;
        padding-inline: 1rem;
        display: grid;
        grid-auto-flow: column;
        grid-template-columns: min-content 1fr;
        gap: 1rem;

        &>nav {
            display: flex;
            gap: 0 1rem;
            flex-wrap: wrap;
            overflow: hidden;
        }

        & a {
            line-height: 2rem;
            color: oklab(from var(--color) l a b / 0.4);
            overflow: hidden;
            text-overflow: clip;

            &:hover {
                color: oklab(from var(--color) l a b / 0.8);
                overflow: visible;
            }

            &:focus-visible {
                box-shadow: 0 0 1rem var(--accent-color);
                padding-inline: 0.5rem;
                margin-inline: -0.5rem;
                color: var(--color);
                overflow: visible;
            }

            &[aria-current="page"], &:first-of-type {
                color: oklab(from var(--accent-color) l a b / 0.8);

                &:hover {
                    color: oklab(from var(--accent-color) l a b / 1);
                }

                &:focus-visible {
                    color: var(--color);
                }
            }
        }
    }
}
@layer components.tags {
    .tags {
        display: flex;
        gap: 0.5rem 1ch;

        flex-wrap: wrap;
        padding-block: 0.5rem;

        overflow-y: hidden;

        & > li {

            &:not(:empty) {
                background-color: var(--accent-color-50);
                color: var(--background-color);
                padding-block: 0.25rem;
                padding-inline: 0.5rem;
                font-size: 0.625rem;
                font-weight: 900;
                text-align: center;
                text-wrap: nowrap;
                flex: 1;
            }
        }
    }

    li:has(:hover, :focus-visible) .tags li {
        background-color: var(--accent-color);
    }
}
@layer layout {
    html {
        min-height: 100%;
        app-region: drag;
        user-select: none;
    }

    body {
        min-height: 100%;
        app-region: no-drag;
    }

    main {
        margin: 2rem 0;
        @media (aspect-ratio > 1) {
            margin: 1rem;
        }

        display: grid;
        grid-template-columns: 1fr;
        grid-auto-rows: minmax(min-content, 2rem);
        gap: 1rem;

        & * {
            display: grid;
            grid-template-columns: subgrid;
            grid-column: 1 / -1;
        }

        &>section {
            place-content: stretch;

            &>ul>li a {
                text-wrap: nowrap;
                text-overflow: ellipsis;
                overflow: hidden;    
            }

            &>*:not(header) {
                background-color: var(--background-color);
            }

            &>header {
                width: min-content;
                height: 2rem;
                place-content: center;
                contain: layout;
                padding-inline: 1rem;
            }

            &>ul>li {
                min-height: 2rem;

                &>* {
                    grid-column: span 1;
                }
            }
        }
    }
}
@layer reset {

    :is(*, :after, :before) {
        margin: 0;
        padding: 0;
        line-height: 100%;
        box-sizing: border-box;
        place-content: center start;
        outline: none;
        border: none;

        &:empty {
            place-self: center start;
        }
    }

    a {
        text-decoration-color: transparent;
    }

    li {
        list-style-type: none;
    }

    input,
    button {
        font-family: inherit;
        font-size: inherit;
        border: inherit;
    }

    progress {
        pointer-events: none;
    }

    img[src$="icon.svg"] {
        width: 1rem;
        -place-self: center;
    }

    script, style, head, meta, base, title, link {
        display: none !important;
    }
}
@layer root {

    :root {
        --background-color-90: color-mix(in oklab, var(--background-color) 90%, var(--color));
        --background-color-80: color-mix(in oklab, var(--background-color) 80%, var(--color));
        --background-color-70: color-mix(in oklab, var(--background-color) 70%, var(--color));

        --accent-color-75: color-mix(in oklab, var(--accent-color) 75%, var(--background-color));
        --accent-color-50: color-mix(in oklab, var(--accent-color) 50%, var(--background-color));
        --accent-color-25: color-mix(in oklab, var(--accent-color) 25%, var(--background-color));

        --color-90: color-mix(in oklab, var(--color) 90%, var(--background-color));
        --color-80: color-mix(in oklab, var(--color) 80%, var(--background-color));
        --color-70: color-mix(in oklab, var(--color) 70%, var(--background-color));
        --color-50: color-mix(in oklab, var(--color) 50%, var(--background-color));

        --accent-color: green;
        --warning-color: yellow;
        --danger-color: red;

        @media(prefers-color-scheme: light) {
            --color: black;
            --background-color: white;
            --accent-color: color-mix(in oklab, springgreen 65%, black);
            --warning-color: color-mix(in oklab, #ddfa00 75%, black);
            --danger-color: color-mix(in oklab, #ff0565 85%, black);
        }

        @media (prefers-color-scheme: dark) {
            --color: white;
            --background-color: black;
            --accent-color: mediumspringgreen;
            --warning-color: #ddfa00;
            --danger-color: #ff0565;
        }
    }
}
@layer theme {
    html {
        font-family: ui-monospace, 'Cascadia Code', 'Source Code Pro', Menlo, Consolas, 'DejaVu Sans Mono', monospace;
        font-size: 1.5rem;
        color-scheme: dark light;
        background-color: var(--background-color);
        color: var(--color);
        caret-color: var(--accent-color);
    }

    body {
        background-color: var(--accent-color-50);

        &> :is(header, footer, main > *) {
            background: var(--background-color);
        }
    }

    body > footer, body > footer * {
        color: var(--color-70);
    }

    a {
        color: var(--color);
    }

    [dangerous] {
        --accent-color: var(--danger-color);
    }

    ul>li {
        background-color: var(--background-color);

        &:nth-of-type(2n) {
            background-color: var(--background-color-80);
        }
    }

    section>header {
        background-color: var(--accent-color);
        color: var(--background-color);
        font-weight: bold;
    }

    @layer animation {
        * {
            transition: all 0.33s linear;
        }

        body:has(:hover) {
            overflow-x: hidden;
        }

        button:hover {
            scale: 1.005;
            z-index: 1;
        }

        ul>li {
            transition: all 0.33s linear, box-shadow 0.125s linear, scale 0.125s linear;

            &:hover, &:focus-within {
                box-shadow: 0 0 12rem rgba(0, 0, 0, 0.25), 0 0 1rem rgba(0, 0, 0, 0.75);
                scale: 1.005;
                z-index: 1;
            }
        }
    }

    @layer glow {
        :is(button, input):hover,
        :is(button, input):focus-visible {
            box-shadow: 0 0 1rem var(--button-color);
        }
    }

    @layer shadow {
        body>main {
            filter: drop-shadow(0 0 1rem black);
        }
    }

    @layer browser.webkit {
        ::-webkit-scrollbar {
            width: 0.5rem;
            background-color: transparent;

            & * {
                background-color: transparent;
            }
        }

        ::-webkit-scrollbar-thumb {
            background-color: var(--accent-color-75);
            border: 0.125rem solid transparent;
            background-clip: padding-box;
            border-radius: 1rem;
            box-shadow: 0 0 5rem var(--accent-color);
        }

        progress {
            color: var(--accent-color);
            width: 100%;
            height: 100%;
            appearance: none;
            
            &::-webkit-progress-bar {
                background-color: transparent;
            }
        
            &::-webkit-progress-value {
                background: currentColor;
                box-shadow: 0 0 1rem currentColor;
                transition: 1s;
            }
        }
    }
}